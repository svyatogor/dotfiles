#!/usr/bin/env bash
set -euo pipefail

# Validate required dependencies are available
validate_dependencies() {
  local missing_deps=()
  for dep in docker jq op; do
    if ! command -v "$dep" &>/dev/null; then
      missing_deps+=("$dep")
    fi
  done

  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    echo "Error: Missing required dependencies: ${missing_deps[*]}" >&2
    echo "Please install the missing tools and try again." >&2
    exit 1
  fi
}

# Find the root directory containing devcontainer configuration
function devcontainer_root() {
  local dir="$PWD"
  while [ "$dir" != "/" ]; do
    if [[ -f "$dir/.devcontainer.json" ]] || [[ -d "$dir/.devcontainer" ]]; then
      echo "$dir"
      return
    fi
    dir=$(dirname "$dir")
  done
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  return 1
}

# Get the devcontainer configuration file path
get_devcontainer_config() {
  if [[ -f "$root/.devcontainer.json" ]]; then
    echo "$root/.devcontainer.json"
  elif [[ -f "$root/.devcontainer/devcontainer.json" ]]; then
    echo "$root/.devcontainer/devcontainer.json"
  else
    echo ""
  fi
}

# Parse devcontainer config and extract a property with fallback
parse_devcontainer_property() {
  local property="$1"
  local fallback="${2:-}"
  local config_file
  config_file=$(get_devcontainer_config)

  if [[ -n "$config_file" ]]; then
    cat "$config_file" | sed 's/^ *\/\/.*//' | jq -r ".$property // \"$fallback\""
  else
    echo "$fallback"
  fi
}

# Get the container ID for the current devcontainer
function get_container_id() {
  docker ps -q --filter "label=devcontainer.local_folder=$root"
}

# Get the workspace folder from devcontainer config
function get_workspace_folder() {
  parse_devcontainer_property "workspaceFolder" "/workspaces"
}

# Build environment variables string for docker exec
build_env_vars() {
  local env_vars=(
    "PROFILE=devcontainer"
    "SSH_AUTH_SOCK=/ssh.sock"
    "DEV_CONTAINER_NAME=$(basename "$root")"
    "SHELL=/bin/zsh"
    # Optional environment variables (only include if set)
    "TERM"
    # AWS credentials
    "AWS_PROFILE"
    "AWS_DEFAULT_REGION"
    "AWS_REGION"
    "AWS_SESSION_EXPIRATION"
    "AWS_SECRET_ACCESS_KEY"
    "AWS_ACCESS_KEY_ID"
    "AWS_CREDENTIAL_EXPIRATION"
    "AWS_SESSION_TOKEN"
  )

  local env_string=""
  for var in "${env_vars[@]}"; do
    if [[ "$var" == *"="* ]]; then
      # Variable with explicit value
      env_string+=" -e $var"
    else
      # Pass through if set in environment
      if [[ -n "${!var:-}" ]]; then
        env_string+=" -e $var"
      fi
    fi
  done
  echo "$env_string"
}

# Parse arguments using getopt
# only “--up”
UP_FLAG=0

while getopts "u" opt; do
  case "$opt" in
  u) UP_FLAG=1 ;;
  *)
    echo "Usage: $0 [-u]" >&2
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

# Validate dependencies before proceeding
validate_dependencies

root=$(devcontainer_root)
if [ "$root" = "" ]; then
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  exit 1
fi

if [ $UP_FLAG -eq 1 ]; then
  user=$(parse_devcontainer_property "containerUser")
  devcontainer up \
    --remote-env SSH_AUTH_SOCK=/ssh.sock \
    --mount "type=bind,source=/run/host-services/ssh-auth.sock,target=/ssh.sock" \
    --mount "type=volume,source=local-share,target=/home/$user/.local/share" \
    --mount "type=volume,source=local-state,target=/home/$user/.local/state" \
    --dotfiles-repository https://github.com/svyatogor/dotfiles.git \
    --dotfiles-install-command scripts/setup-devcontainer.sh \
    --workspace-folder "$root" \
    --additional-features '{"ghcr.io/devcontainers/features/sshd:1": {}, "ghcr.io/devcontainers-extra/features/apt-packages:1": {"packages": "tmux stow "}, "ghcr.io/roul/devcontainer-features/mise:1": {}}' \
    --remove-existing-container
else
  container_id=$(get_container_id)
  workspace_folder=$(get_workspace_folder)

  # Build environment variables using the new function
  ENV_VARS=$(build_env_vars)

  op run --no-masking -- docker exec $ENV_VARS -w "$workspace_folder" -it "$container_id" zsh -il
fi
