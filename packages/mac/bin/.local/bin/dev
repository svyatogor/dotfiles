#!/usr/bin/env bash
function devcontainer_root() {
  local dir=$PWD
  while [ "$dir" != "/" ]; do
    if [[ -f "$dir/.devcontainer.json" ]] || [[ -d "$dir/.devcontainer" ]]; then
      echo $dir
      return
    fi
    dir=$(dirname "$dir")
  done
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  return 1
}

function get_container_id() {
  docker ps -q --filter label=devcontainer.local_folder=$root
}

function get_workspace_folder() {
  local devcontainer_config=""
  if [[ -f "$root/.devcontainer.json" ]]; then
    devcontainer_config="$root/.devcontainer.json"
  elif [[ -f "$root/.devcontainer/devcontainer.json" ]]; then
    devcontainer_config="$root/.devcontainer/devcontainer.json"
  else
    echo "/workspaces"
    return
  fi

  local workspace_folder=$(cat "$devcontainer_config" | sed 's/^ *\/\/.*//' | jq -r '.workspaceFolder // "/workspaces"')
  echo "$workspace_folder"
}

# Parse arguments using getopt
# only “--up”
OPTS=$(getopt -o "" --long up,aws:: -n 'dev' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options." >&2
  exit 1
fi

eval set -- "$OPTS"

UP_FLAG=0
COMMAND_ARGS=""

while true; do
  case "$1" in
    --up)
      UP_FLAG=1
      shift
      ;;
    --)
      shift
      COMMAND_ARGS="$*"
      break
      ;;
    *)
      break
      ;;
  esac
done

root=$(devcontainer_root)
if [ "$root" = "" ]; then
  echo "No .devcontainer.json or .devcontainer/ found" >&2
  return 1
fi

if [ $UP_FLAG -eq 1 ]; then
  user=$(cat "$root/.devcontainer/devcontainer.json" | sed 's/^ *\/\/.*//' | jq -r '.containerUser')
  devcontainer up \
  --remote-env SSH_AUTH_SOCK=/ssh.sock \
  --mount "type=bind,source=/run/host-services/ssh-auth.sock,target=/ssh.sock" \
  --mount "type=volume,source=shell-history,target=/home/$user/.local/share" \
  --dotfiles-repository git@github.com:svyatogor/dotfiles.git \
  --workspace-folder $root \
  --remove-existing-container
else
  container_id=$(get_container_id)
  workspace_folder=$(get_workspace_folder)

  # Build environment variables
  ENV_VARS="-e SSH_AUTH_SOCK=/ssh.sock -e NVIM_APPNAME=nvim_host -e DEV_CONTAINER_NAME=$(basename $root) -e TERM  -e AWS_PROFILE -e AWS_DEFAULT_REGION -e AWS_REGION -e AWS_SESSION_EXPIRATION -e AWS_SECRET_ACCESS_KEY -e AWS_ACCESS_KEY_ID -e AWS_CREDENTIAL_EXPIRATION -e AWS_SESSION_TOKEN"

  if [ -z "$COMMAND_ARGS" ]; then
    # op run --no-masking --env-file="$HOME/dotfiles/container-secrets.env" -- $DOCKER exec $ENV_VARS -w /workspace -it $container_id fish -ilc "tmux new -A -s $(basename $root)"
    op run --no-masking --env-file="$HOME/dotfiles/container-secrets.env" -- docker exec $ENV_VARS -w "$workspace_folder" -it $container_id bash -il
  else
    op run --no-masking --env-file="$HOME/dotfiles/container-secrets.env" -- docker exec $ENV_VARS -w "$workspace_folder" -it $container_id bash -ilc "$COMMAND_ARGS"
  fi
fi

